<?php

function fordere_block_info() {
	return array (
			'upcomminggames' => array (
					'info' => 'Abgemachte Spiele'
			),
			'shortlyplayedgames' => array (
					'info' => 'Kuerzlich gespielte Spiele'
			)
	);
}

function fordere_block_view($blockname) {
	$season = Season::getCurrentSeason ();

	switch ($blockname) {
		case 'upcomminggames' :
			return array (
			'content' => '<h2>Abgemachte Spiele</h2>' . $season->getUpcommingGames ()
			);

		case 'shortlyplayedgames' :
			return array (
			'content' => $season->getShortlyPlayedGames ()
			);
	}
}

function fordere_permission() {
	return array (
			'fordere show dashboard' => array (
					'title' => 'Fordere Dashboard',
					'description' => 'Anzeigen des Dashboard'
			),
			'fordere player detail' => array (
					'title' => 'Fordere Spieler Details',
					'description' => 'Anzeigen von Spieler-Details'
			),
			'fordere admin' => array (
					'title' => 'Fordere Administration',
					'description' => 'Erm&ouml;glicht Zugriff auf den Administrationsbereich der Saison'
			),
			'fordere admin teams' => array (
					'title' => 'Fordere Team-Administration',
					'description' => 'Erm&ouml;glicht Zugriff auf die Verwaltung der Teams'
			),
			'fordere administration payment' => array (
					'title' => 'Fordere Administration Kasse',
					'description' => 'Administration der bezahlten Beiträge für die aktuelle Saison'
			) ,

			'fordere admin matches' => array (
					'title' => 'Fordere Match-Administration',
					'description' => 'Erm&ouml;glicht das erstellen der Matches f&uuml;r eine Saison'
			),
			'fordere showuserimage' => array (
					'title' => 'Spieler Bilder anzeigen',
					'description' => 'zeigt die Benutzerbilder an'
			),
			'fordere admin season' => array (
					'title' => 'Saison-Administration',
					'description' => 'Administration der gesamten Saison mit den Wettbewerben'
			),
			'fordere season details' => array (
					'title' => 'Saison-Details',
					'description' => 'Kann die Teams/Tabelle/Begegnungen der aktuellen Saison anzeigen.'
			),
			'fordere season register' => array (
					'title' => 'Saison Anmeldung',
					'description' => 'Berechtigt den Benutzer das register-Forum-Formular auszufüllen'
			)
	);
}

function fordere_entity_info_alter($entity_info) {
	$entity_info ['node'] ['view modes'] ['full team'] = array (
			'label' => t ( 'Team anzeige' ),
			'custom settings' => TRUE
	);
}

function fordere_node_info() {
	return array (

			'fordere_game' => array (
					'name' => t ( 'Game' ),
					'base table' => 'node',
					'base' => 'fordere',
					'description' => t ( 'Game' ),
					'has_title' => TRUE,
					'title_label' => t ( 'Game' ),
					'locked' => FALSE
			),
			'fordere_team' => array (
					'name' => t ( 'Team' ),
					'base' => 'fordere',
					'base table' => 'node',
					'description' => t ( 'Team' ),
					'has_title' => TRUE,
					'title_label' => t ( 'Team' ),
					'locked' => FALSE
			),
			'fordere_location' => array (
					'name' => t ( 'Location' ),
					'base' => 'fordere',
					'base table' => 'node',
					'description' => t ( 'Location' ),
					'has_title' => TRUE,
					'title_label' => t ( 'Location' ),
					'locked' => FALSE
			)
	);
}

//TODO: old?
function fordere_form($node, $form_state) {
	$type = node_type_get_type ( $node );
	$form ['title'] = array (

			'#type' => 'textfield',
			'#title' => check_plain ( $type->title_label ),
			'#default_value' => ! empty ( $node->title ) ? $node->title : '',
			'#required' => TRUE,
			'#weight' => - 5
	);

	return $form;
}

function fordere_forms($form_id, $args) {

	$forms = array ();
	if (0 !== strpos ( $form_id, 'fordere_dashboard' )) {
		return $forms;
	}
	$forms [$form_id] = array (
			'callback' => 'fordere_form_builder',
			'callback arguments' => array (
					$form_id,
					$args
			)
	);

	return $forms;
}

function fordere_form_builder($form, &$form_state, $form_id, $args) {

	switch ($form_id) {
		case 'fordere_dashboard_' . $args [0] :
			$champ = Championschip::CreateChampionschip ( $args [0] );
			$data = array (
					'children' => $champ->getGamesToPlayForm ( $form_state ),
					'#title' => $champ->getName ()
			);

			return $data;
	}
}

function fordere_form_builder_submit($form, $form_state) {

	$formid = $form ['#form_id'];
	if (strstr ( $formid, 'fordere_dashboard_' )) {
		$split = explode ( '_', $formid );
		$champId = $split [2];
		$champ = Championschip::CreateChampionschip ( $champId );

		// TODO: Dependency on Button Value
		if ($form_state ['triggering_element'] ['#value'] == 'Eintragen') {
			$champ->enterResult ( $form_state );
			return;
		}
		if ($form_state ['triggering_element'] ['#value'] == 'Absagen') {
			$champ->cancelGame ( $form_state );
			return;
		}

		if ($form_state ['triggering_element'] ['#value'] == 'Resultat loeschen') {
			$champ->removeResult ( $form_state );
			return;
		}

		$champ->registerGame ( $form_state );
	}
}

function fordere_form_builder_validate($form, $form_state) {

	$formid = $form ['#form_id'];
	if (strstr ( $formid, 'fordere_dashboard_' )) {
		$split = explode ( '_', $formid );
		$champId = $split [2];
		$champ = Championschip::CreateChampionschip ( $champId );
		if ($form_state ['triggering_element'] ['#value'] == 'Eintragen') {
			$champ->validateEnterResult ( $form_state );
			return;
		}

		$champ->validateRegisterGame ( $form_state );
	}
}

function fordere_help($path, $arg) {

	//	menu_rebuild ();


	switch ($path) {
		case "admin/help#fordere" :
			return '<p>' . t ( "Displays links to nodes created on this date" ) . '</p>';
			break;
	}

}

function fordere_menu() {

	$items = array ();

	$items ['season'] = array (
			'title' => 'Aktuelle Saison',
			'page callback' => 'seasonDashboard',
			'access callback' => true
	);

	$items ['season/registerform'] = array (
			'title' => 'Anmelden',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'getRegisterForm',
					2
			),
			'access callback' => true
	);

	$season = Season::getCurrentSeason ();
	foreach ( $season->championschips as $champ ) {
		$items ['season/' . $champ->getId ()] = array (
				'title' => $champ->getName (),
				'page callback' => 'seasonTable',
				'page arguments' => array (
						1
				),
				'access callback' => 'user_access',
				'access arguments' => array (
						'fordere season details'
				),
				'type' => MENU_NORMAL_ITEM
		);

		$items ['season/' . $champ->getId () . '/table'] = array (
				'title' => $champ->getCurrentStateDescription (),
				'page callback' => 'seasonTable',
				'page arguments' => array (
						1
				),
				'access callback' => 'user_access',
				'access arguments' => array (
						'fordere season details'
				),
				'type' => MENU_DEFAULT_LOCAL_TASK
		);

		$items ['season/' . $champ->getId () . '/teams'] = array (
				'title' => 'Teams',
				'page callback' => 'seasonTeams',
				'page arguments' => array (
						1
				),
				'access callback' => 'user_access',
				'access arguments' => array (
						'fordere season details'
				),
				'type' => MENU_LOCAL_TASK
		);

		//TODO Lösung mit Champ die weiss was für menüitems es noch brauchts wäre wohl besser
		if ($champ instanceof League) {
			$items ['season/' . $champ->getId () . '/matches'] = array (
					'title' => 'Begegnungen',
					'page callback' => 'seasonMatches',
					'page arguments' => array (
							1
					),
					'access callback' => 'user_access',
					'access arguments' => array (
							'fordere season details'
					),
					'type' => MENU_LOCAL_TASK
			);

			$items ['season/' . $champ->getId () . '/addlateteam'] = array (
					'page callback' => 'addLateTeam',
					'page arguments' => array (
							1,3
					),
					'access callback' => 'user_access',
					'access arguments' => array (
							'fordere admin teams'
					)
			);


		}

		if ($champ instanceof Cup) {
			$items ['season/' . $champ->getId () . '/bracket/%d'] = array (
					'title' => 'Bracket',
					'page callback' => 'fordere_cup_bracket',
					'page arguments' => array (
							1,
							3
					),
					'access callback' => 'user_access',
					'access arguments' => array (
							'fordere season details'
					),
					'type' => MENU_LOCAL_TASK
			);
			
		}

		$items ['season/' . $champ->getId () . '/usermails'] = array (
				'title' => 'E-Mail-Verteiler (' . $champ->getName () . ')',
				'page callback' => 'champMails',
				'page arguments' => array (
						1
				),
				'type' => MENU_CALLBACK,
				'access callback' => 'user_access',
				'access arguments' => array (
						'fordere season details'
				)
		);

		$items ['season/' . $champ->getId () . '/updateroles'] = array (
				'title' => 'Userrollen',
				'page callback' => 'updateroles',
				'page arguments' => array (
						1,
						3,
						4
				),
				'type' => MENU_CALLBACK,
				'access callback' => 'user_access',
				'access arguments' => array (
						'fordere admin teams'
				)
		);

	}

	$items ['season/matches'] = array (
			'title' => 'Abgemachte Spiele',
			'page callback' => 'getmatches',
			'type' => MENU_CALLBACK,
			'access callback' => 'user_access',
			'access arguments' => array (
					'fordere season details'
			)
	);

	$items ['seasonadmin/teams'] = array (
			'title' => 'Teams',
			'page callback' => 'drupal_get_form',
			'access arguments' => array (
					'fordere admin teams'
			),
			'page arguments' => array (
					'getTeamAdminForm',
					2
			)
	);

	$items ['seasonadmin/matches'] = array (
			'title' => 'Matches',
			'page callback' => 'drupal_get_form',
			'access arguments' => array (
					'fordere admin matches'
			),
			'page arguments' => array (
					'getMatchAdminForm',
					2
			)
	);

	$items ['seasonadmin/seasondashboard'] = array (
			'title' => 'Season-Administration-Dashboard',
			'page callback' => 'seasonAdminDashoboard',
			'access arguments' => array (
					'fordere admin season'
			)
	);

	$items ['seasonadmin/season/%'] = array (
			'title' => 'Season',
			'page callback' => 'drupal_get_form',
			'access arguments' => array (
					'fordere admin season'
			),
			'page arguments' => array (
					'getSeasonAdmin',
					2
			)
	);

	$items ['fordereadmin'] = array (
			'title' => 'Administration',
			'page callback' => 'admindashboard',
			'access arguments' => array (
					'fordere admin'
			)
	);

	return $items;
}

function addLateTeam($champId, $teamId)
{
	$champ = Championschip::CreateChampionschip($champId);
	$champ -> createGamesLateTeam($teamId);
}

function fordere_mail($key, &$message, $params) {
	switch ($key) {
		case 'confirmation' :
			$message ['subject'] = 'Anmeldebestaetigung ' . $params ['championschip'];
			$message ['body'] = getAnmeldeBestaetigung ( $params ['player1'], $params ['player2'], $params ['team'], $params ['championschip'] );
			break;
		case 'gamereservation' :
			$message ['subject'] = 'Neue Begegnung auf fordere.ch eingetragen';
			$message ['body'] = getGameReservationMail ( $params );
			break;
	}
}

function getGameReservationMail($params) {
	$args = array ();
	foreach ( $params as $key => $value ) {
		$args ['@' . $key] = $value;
	}

	$message = "Hallo zusammen<br />

			Soeben wurde folgende Begegnung bei <a href='http://fordere.ch'>fordere.ch</a> eingetragen: <br />

			Wettbewerb: @championschip<br />
			Teams: @team1 vs. @team2<br />
			Lokal: @location<br />
			Zeipunkt: @date<br />

			Wir bitten euch rechtzeitig mit der Partie zu beginnen um anschliessende Begegnungen nicht zu behindern.";
	return t ( $message, $args );
}

function formatAdditonalFields($fields) {
	if (count ( $fields ) == 0) {
		return "";
	}

	$output = '';
	foreach ( $fields as $key => $value ) {
		$output .= $key . ": " . $value . "<br/>";
	}

	return $output;
}

function getAnmeldeBestaetigung($player1, $player2, $team, $championschip) {

	$args = array (

			'@player1name' => $player1->name
	);
	$args ['@player1email'] = $player1->getContactEmail ();
	$args ['@player1phone'] = $player1->getPhone ();
	$args ['@player2name'] = $player2->name;
	$args ['@player2email'] = $player2->getContactEmail ();
	$args ['@player2phone'] = $player2->getPhone ();
	$args ['@teamname'] = $team->name;
	$args ['@homelocation'] = Team::getHomeLocation ( $team->id );
	$args ['!additionalteamfields'] = formatAdditonalFields ( $team->getAdditonalFields () );
	$args ['@username'] = $player1->getDrupalUserName ();
	$args ['@championschip'] = $championschip;

	return t ( "<h1>Anmeldebest&auml;tigung @championschip</h1>
			Hallo @teamname, herzlich willkommen in der Z&uuml;rcher bar-foos-league!
			<br />
			Kontrolliert bitte Eure Angaben und meldet Euch gegebenenfalls bei info@fordere.ch.<br/>
			Ihr habt Euch f&uuml;r folgenden Wettbewerb angemeldet: @championschip<br />
			<h2>Teaminfos</h2>
			Name: @teamname <br/>
			Heimlokal: @homelocation <br />
			!additionalteamfields

			<h2>Personalien</h2>
			Name: @player1name<br />
			E-Mail: @player1email<br />
			Telefon: @player1phone
			<h2>Mitspieler</h2>
			Name: @player2name<br />
			E-Mail: @player2email<br />
			Telefon: @player2phone
			<h2>Daten Saison 10</h2>
			Beginn: Sa. 1. Dezember 2012 in der Vollmond Taverne<br />
			Halbzeit: Sa. 2 M&auml;rz 2013<br />
			Schluss: Sa. 11. Mai 2013<br />
			Finaltag: Sa. 01. Juni 2013<br />
			<h2>Infos</h2>
			Kontakt: info@fordere.ch<br/>
			Mitgliederbeitrag einmalig CHF 25.-/Person, unabh&auml;ngig davon an welchen Wettbewerben (nur Liga+Cup oder Liga+Cup plus Ullrich-Cup oder nur Ullrich-Cup) teilgenommen wird.<br /><br />
			<b>Kontodaten: </b><br />
			Postkonto: 85-758417-6 <br /><br />

			<u>F&uuml;r Bank&uuml;berweisungen:</u><br />
			IBAN: CH19 0900 0000 8575 8417 6 <br />
			Clearing-Nr.: 9000 <br />
			Bank: Die Schweizerische Post <br /><br />
			<u>Lautend auf: </u><br />
			Fordere.ch<br />
			Kn&uuml;slistrasse 5<br />
			8004 Z&uuml;rich<br />
			<br />
			<b>Neue Teams: </b><br />
			Neue Teams werden entsprechend ihrer Spielst&auml;rke zugeteilt.
			Dazu m&uuml;sst ihr vorspielen und zeigen was ihr so drauf habt ;)<br/>
			Folgende Termine gibt es zum Vorspielen:
			<ul>
			<li>Dienstag 30. Oktober 2012 ab 18:30 im TFCZ (Landenbergstrasse 10, 8037 Z&uuml;rich. Bei der Druckerei ADAG im UG)</li>
			<li>Montag 5. November 2012 ab 18:30 im TFCZ (Landenbergstrasse 10, 8037 Z&uuml;rich. Bei der Druckerei ADAG im UG)</li></ul>
			<p><a href=\"http://doodle.com/2552idxqd7gncgm2\" target=\"_new\">Tragt Euch bitte im Doodle ein (mit dem Teamnamen) um einen Vorspieltermin auszuw&auml;hlen.</a></p>
			<p>
			<b>G&uuml;nstige STF-Lizenz</b><br />
			Als Mitglieder von Fordere profitiert Ihr von einem Rabatt auf STF-Lizenzen. Diese sind <a href=\"http://stf-tischfussball.ch/index.php/services/lizenzen/lizenz-beantragen\">hier</a> f&uuml;r 30.- statt 50.- erh&auml;ltlich.</p>
			Weitere Infos findet Ihr auf der Webseite <a href=\"http://fordere.ch\">fordere.ch</a> unter <a href=\"http://fordere.ch/drupal/faq-page\">FAQ's</a>. <br />

			Wir w&uuml;nschen Euch f&uuml;r die kommende Saison viel Spass und freuen uns, Euch dabeizuhaben!<br />
			Euer fordere.ch-Team", $args );

}

function phptemplate_($form) {
	$variables = array (

			'user' => $user,
			'form' => $form
	);
	return _phptemplate_callback ( 'get_register_form', $variables );
}

function getRegisterForm($form, &$form_state, $championschipId) {

	$champs = Season::getCurrentSeason ()->championschips;
	foreach ( $champs as $champ ) {
		if ($champ->getId() == $championschipId) {
			$form ['#theme'] = 'get_register_form';
			$cs = Championschip::CreateChampionschip ( $championschipId );
			return $cs->getRegisterForm ();
		}
	}

	return array (
			'#markup' => 'Championschip is not in current season!'
	);
}

function getRegisterForm_validate($form, &$form_state) {
	$championschipId = $form_state ['build_info'] ['args'] [0];
	$cs = Championschip::CreateChampionschip ( $championschipId );
	try {
		$cs->validateRegisterForm ( $form );
	} catch ( Exception $ex ) {
		form_set_error ( '', $ex->getMessage () );
	}
}

function getRegisterForm_submit($form, &$form_state) {
	$championschipId = $form_state ['build_info'] ['args'] [0];
	$cs = Championschip::CreateChampionschip ( $championschipId );
	if ($cs->register ( $form )) {
		drupal_set_message ( "Du hast euch erfolgreich angemeldet!" );
		$form_state ['redirect'] = 'season/dashboard';
	} else {
		drupal_set_message ( "Anmeldeformular nicht korrekt ausgefuellt", 'error' );
	}
}

function isUserProfileComplete() {
	global $user;
	$currUser = user_load ( $user->uid );
	return (strlen ( $currUser->field_firstname [LANGUAGE_NONE] [0] ['value'] ) > 0 && strlen ( $currUser->field_lastname [LANGUAGE_NONE] [0] ['value'] ) > 0);
}

function getUserProfileEditLink() {
	global $user;
	return url ( 'user/' . $user->uid . '/edit' );
}

function seasonDashboard() {
	$season = Season::getCurrentSeason ();
	$msg = '';
	switch ($season->phase) {
		case 0 :
			$msg = 'Saison ist in Vorbereitung';

			break;
		case 1 :
			if (! user_access ( 'fordere show dashboard' )) {
				return array (
						'#markup' => '<h3>Zugriff ohne Account nicht m&ouml;glich</h3><p>Um diese Seite anzeigen zu können benötigst du einen Account. Über diesen erhälst du die Möglichkeit in der Bar-foos-League mitzuspielen, im Forum Beiträge zu verfassen und vieles mehr... </p><p>Falls du bereits einen Account hast, melde dich unter folgendem Link an:<br /><a href="/drupal/user/login?destination=season/dashboard">Mit vorhandenem Account anmelden</a></p><p>Falls du noch keinen Account hast kannst du unter folgendem Link einen erstellen:<br /><a href="/drupal/user/register">Neuer Account erstellen</a></p><p><i>Hinweis: Mit diesem Account meldest du dich nur an der Seite fordere.ch an. Du nimmst nicht automatisch an der Liga oder einen anderen Wettbewerb teil. Jeder der jedoch mitspielen will benötigt einen solchen Account.</i></p>'
				);
			}

			if (! isUserProfileComplete ()) {
				return array (
						'#markup' => '<h2>Anmeldung nicht m&ouml;glich</h2>Dein Profil wurde noch nicht vollst&auml;ndig ausgef&uuml;lt. <br/>Du musst mindestens deinen Vor- und Nachnamen eintragen. Der folgende Link bringt dich in dein Profil: <br/><a href="' . getUserProfileEditLink () . '">Dein Profil</a>'
				);
			}

			return $season->getRegisterInformation ();
		case 2:
			return array (
			'#markup' => '<h2>Saison steht kurz bevor...</h2>Die letzten Vorbereitungen laufen, du kannst bereits die Einteilung der angemeldeten Teams einsehen. Sobald die Liga beginnt wirst du auf dieser Seite deine Spiele verwalten k&ouml;nnen.'
					);
					break;
		case 3 :
			$out = '';

			if (! user_access ( 'fordere show dashboard' )) {
				return Season::getCurrentSeason ()->getUpcommingGames ();
			}

			foreach ( $season->getRunningSeasonDashboard () as $id => $champ ) {
				$champObi = Championschip::CreateChampionschip ( $id );
				$out .= "<h2>Deine Spiele in \"" . $champObi->getName () . "\"</h2>";
				$out .= drupal_render ( $champ );
				$out .= "<a href='mailto:" . $champObi->getOpenGameMails () . "'>Mail an alle noch offenen Gegner</a>";
			}

			return $out;
		case 4 :

			$out = '<h2>Saison abgeschlossen</h2>Die Saison ist vorbei und die Vorbereitungen auf den Finaltag laufen. Wir freuen uns euch alle am 2. Juni in der Roten Fabrik begr&uuml;ssen zu d&uuml;rfen.';
			return $out;
		case 5 :
			break;
	}

	return array (

			'#markup' => '<p>' . t ( $msg ) . '</p>'
	);
}

function theme_themeregisterinfo($vars) {
	$output = '<h2>' . $vars ['element'] ['#title'] . '</h2>';

	if (trim ( $vars ['element'] ['#description'] ) != '') {
		$output .= $vars ['element'] ['#description'] ;
	}
	
	$output .= "<div class='row'>";
	foreach ( $vars ['element'] ['child'] as $champ ) {
$output .= "<div class='four columns'><ul class='pricing-table'>";

		$output .= '<li class="title">' . $champ ['title'] . '</li>';

		if ($champ ['description'] != '') {
			$output .= '<li class="description">'.$champ ['description'] . '</li>';
		}

		if ($champ ['canregister'] && ! $champ ['nodirectregister']) {
			$output .= '<li class="cta-button"><a class="button" href="' . $champ ['link'] . '"/>Anmelden</a></li>';
		} else if (! $champ ['canregister']) {
			$output .= '<li class="description">Du bist bereits angemeldet:' . '<br /><i>';
			$output .= 'Team: ' . $champ ['team'] . '<br />';
			$output .= 'Mitspieler: ' . $champ ['player2'] . '<br/>';
			$output .= 'Heimlokal: ' . $champ ['homelocation'] . '<br/></li>';

			if (isset ( $champ ['league_wish'] )) {
				$output .= '<li class="description">Wunschliga: ' . $champ ['league_wish'] . '</li>';
			}
		}
$output .= "</ul></div>";

	}
	
	$output .= "</div>";


	return $output;
}

function getTeamAdminForm($form, $form_state, $championschipId) {
	$champ = Championschip::CreateChampionschip ( $championschipId );
	drupal_set_title ( "Team Admin " . $champ->getName () );
	return $champ->getTeamAdminForm ( $form, $form_state );
}

function getMatchAdminForm($form, $form_state, $championschipId) {
	$champ = Championschip::CreateChampionschip ( $championschipId );
	drupal_set_title ( "Match Admin " . $champ->getName () );
	$data = $champ->getMatchAdminForm ( $form, $form_state );
	return $data;
}

function getMatchAdminForm_submit($form, &$form_state) {
	$championschipId = $form_state ['build_info'] ['args'] [0];
	$cs = Championschip::CreateChampionschip ( $championschipId );
	$cs->createGames ( $form, $form_state );
}

function league_callback($form, $form_state) {
	return $form;
}

function league_callback_submit($form, $form_state) {
	$form_state ['rebuild'] = FALSE;
	die ();
}

function league_callback_enter($form, $form_state) {
	//Championschip::registerGame ( $form_state );
	return $form;
}

function league_callback_result($form, $form_state) {
	$champid = $form_state ['values'] ['children'] ['championschip'];

	$champ = Championschip::CreateChampionschip ( $champid );
	$champ->enterResult ( $form_state );

	return $form;
}

function confirmleague_callback($form, $form_state) {
	$champid = $form_state ['values'] ['championschip'] ['#value'];
	$champ = Championschip::CreateChampionschip ( $champid );
	return $champ->teamAdminAjaxCallback ( $form, $form_state );
}

function theme_adminteam($variables) {
	$champid = $variables ['form'] ['championschip'] ['#value'];
	$champ = Championschip::CreateChampionschip ( $champid );
	return $champ->themeTeamAdmin ( $variables );
}

function theme_adminmatch($variables) {
	$champid = $variables ['form'] ['championschip'] ['#value'];
	$champ = Championschip::CreateChampionschip ( $champid );
	return $champ->themeTeamAdmin ( $variables );
}

function fordere_theme($existing, $type, $theme, $path) {
	$items = array (
			'themeregisterinfo' => array (
					'render element' => 'element'
			)
	);
	$items ['adminteam'] = array (
			'render element' => 'form'
	);

	$items ['adminmatch'] = array (
			'render element' => 'form'
	);

	$items ['getRegisterForm'] = array (
			'template' => 'templates/get_register_form',
			'render element' => 'form'
	);

	$items ['dashboard_running'] = array (
			'render element' => 'form'
	);

	$items ['seasondashboardtheme'] = array (
			'variables' => array (
					'form' => null,
					'season' => null
			),
			'template' => 'templates/dashboard'
	);

	$items ['teams'] = array (
			'variables' => array (
					'teams' => null,
					'type' => null
			),
			'template' => 'templates/teams'
	);

	return $items;
}

function theme_dashboard_running($form) {
	return drupal_render ( $arr );
}

function seasonTable($championschipId) {
	$champ = Championschip::CreateChampionschip ( $championschipId );
	drupal_set_title ( "" );
	return runChampionschipMethod ( $championschipId, 'getCurrentState' );
}

function seasonTeams($championschipId) {
	$champ = Championschip::CreateChampionschip ( $championschipId );
	drupal_set_title ( "" );
	$type = $champ->getTeamThemeType ();
	return theme ( 'teams', array (
			'teams' => runChampionschipMethod ( $championschipId, 'getTeams' ),
			'type' => $type
	) );
}

function seasonMatches($champId) {
	GameFactory::loadGames ( $champId );
	$league = Championschip::CreateChampionschip ( $champId );
	$leagues = $league->getLeagues ();

	$out = '';
	foreach ( $leagues as $leagueId => $leagueName ) {
		$out .= '<h3>' . $leagueName . '</h3>';
		$groups = $league->getLeagueGroups ( $leagueId );
		sort($groups);
		foreach ( $groups as $groupId ) {
			if(count($groups) > 1)
			{
				$out .= '<h3>' . $groupId . '. Gruppe</h3>';
			}
				
			$out .= '<table class="fordere_matches_table" >';

			$teams = $league->getTeamsForGroup ( $leagueId, $groupId );

			$out .= '<tr><td>&nbsp;</td>';
			foreach ( $teams as $team ) {
				$out .= '<td class="fordere_matches_teamheader"><div class="rotate_outer"><div class="rotate_text">' . $team->getShortNamePointed (13) . '</div></div></td>';
			}
			$out .= '</tr>';

			foreach ( $teams as $team1 ) {
				$out .= '<tr><td class="fordere_matches_teamname">' . $team1->getShortNamePointed ( 20 ) . '</td>';
				foreach ( $teams as $team2 ) {
					if ($team1->id == $team2->id) {
						$out .= '<td class="fordere_matches_nogame">/</td>';
					} else {
						$game = GameFactory::getGamebyTeam ( $team1->id, $team2->id, $champId );

						switch ($game->state) {
							case 1 :
								$out .= '<td class="fordere_matches_created">';
								break;
							case 2 :
								$out .= '<td class="fordere_matches_planned">';
								break;
							case 3 :
								$out .= '<td class="fordere_matches_finished">';
								break;
						}

						if($game -> hometeamid == $team1 -> id)
						{
							$out .=  $game -> getResult() .  '</td>';
						}
						else
						{
							$out .=  $game -> getInvertedResult() .  '</td>';
						}

					}
				}
				$out .= '</tr>';
			}
			$out .= '</table>';
		}

	}

	return $out;
}

function champMails($champId) {
	$champ = Championschip::CreateChampionschip ( $champId );

	return "<a href='mailto:" . $champ->getUserMails () . "'>Mail an alle aus: " . $champ->getName ();
}

function updateroles($champId, $roleId, $round = null) {

	if($round == null)
	{
		addPlayerPermissions($roleId);
		return;
	}
	
	$champ = Championschip::CreateChampionschip ( $champId );
	$champ->updateRole ( $roleId, $round );

	return "DONE";
}

function seasonAdminDashoboard() {

	return "<table><tr><th>Name</th><th>Status</th></tr></table>";

}

function admindashboard() {
	return "JO";
}

function seasonRules($championschipId) {
	return runChampionschipMethod ( $championschipId, 'getRules' );
}

function removereservation($form, $form_state) {
}

function runChampionschipMethod($championschipId, $method) {
	if (! isset ( $championschipId ) || ! is_numeric ( $championschipId )) {
		//TODO: Error Handling
		die ( 'Wrong ID' );
		return;
	}

	$championship = Championschip::CreateChampionschip ( $championschipId );
	return $championship->$method ();
}

function fordere_preprocess_node(&$variables) {
	$nodeType = $variables ['type'];

	switch ($nodeType) {
		case 'fordere_team' :
			$team = Team::getTeamById ( $variables ['nid'] );
			if (isset ( $team->getPlayer1 ()->getUser ()->picture->filename )) {
				$player1Image = $team->getPlayer1 ()->getUser ()->picture->filename;
				$variables ['player1image'] = $picture = "../" . variable_get ( 'file_public_path', conf_path () . '/files' ) . "/styles/thumbnail/public/pictures/$player1Image";
			}
			if (isset ( $team->getPlayer2 ()->getUser ()->picture->filename )) {
				$player2Image = $team->getPlayer2 ()->getUser ()->picture->filename;
				$variables ['player2image'] = $picture = "../" . variable_get ( 'file_public_path', conf_path () . '/files' ) . "/styles/thumbnail/public/pictures/$player2Image";
			}

			$variables ['team'] = $team;
			$variables ['result'] = getResultData ( $team );
			break;
		case 'fordere_game' :
			$variables ['title'] = 'aa';
			$game = new Game ( $variables ['nid'] );
			$variables ['hometeam'] = $game->getHomeTeam ();
			$variables ['guestteam'] = $game->getGuestTeam ();
			$variables ['game'] = $game;
			if ($game->state > 2) {
				$variables ['result'] = $game->getResult ();
			} else {
				$variables ['result'] = 'VS.';
			}

			break;
	}

}

function getResultData($team) {
	$out = array ();
	foreach ( $team->getChampionschips () as $champ ) {
		$arr = array ();
		$arr ['name'] = $champ->getName ();
		$arr ['games'] = array ();
		$games = $champ->getGamesForTeam ( $team->id );
		foreach ( $games as $game ) {
			if ($game->state < 3) {
				//continue;
			}
			$arr ['games'] [] = $game;
		}

		usort ( $arr ['games'], 'compareGames' );

		$out [] = $arr;
	}
	return $out;
}

function compareGames($game1, $game2) {

	if ($game1->playDate < $game2->playDate) {
		return - 1;
	}

	return 1;

}

function getmatches() {
	$season = Season::getCurrentSeason ();
	return $season->getUpcommingGames ();
}

function removePlayerFromRole($roleId) {
	$result = db_query ( 'SELECT drupal_users.uid FROM drupal_users_roles LEFT JOIN drupal_users  ON drupal_users_roles.uid = drupal_users.uid WHERE drupal_users_roles.rid=:s', array (
			':s' => $roleId
	) );
	$data = $result->fetchAll ();
	$uids = array ();
	foreach ( $data as $user ) {
		$uids [] = $user->uid;
	}

	user_multiple_role_edit ( $uids, 'remove_role', $roleId );
}

function addPlayerPermissions($roleId) {

	removePlayerFromRole($roleId);
	
	$query = db_select ( 'fordere_player', 'p' );
	$query->condition ( 'p.seasonId', Season::getCurrentSeasonId () );
	$query->addField ( 'p', 'drupalUserId' );
	$query->addField ( 'p', 'Id' );
	$result = $query->execute ()->fetchAll ();
	
	
	foreach ( $result as $player ) {
		
		$query= db_select('fordere_playerinteam', 'p');
		$query -> condition('p.playerId', $player -> Id);
		$query -> addField('p', 'teamId');
		$teamCount = $query -> execute() -> fetchAll();
		
		if(count($teamCount) > 0)
		{
			custom_add_role_to_user ( $player->drupalUserId, 'Spieler' );			
		}
		
	}

	return "DONE";

}

function fordere_cup_bracket($champId, $beginRound) {

	if (! is_numeric ( $beginRound ) || $beginRound < 0) {
		return "No bracket available for this round";
	}

	$endRound = $beginRound + 3;

	$out = '';
	$out .= $beginRound;
	return $out;
}

/**
 * Add a role to a user.
 *
 * @param $user
 * User object or user ID.
 * @param $role_name
 * String value of role to be added.
 *
 * @see http_://drupal.org/node/28379#comment-4277052
 * @see http_://api.drupal.org/api/drupal/modules--user--user.module/function/user_save
 */
function custom_add_role_to_user($uid, $role_name) {
	if ($role = user_role_load_by_name ( $role_name )) {
		user_multiple_role_edit ( array (
		$uid
		), 'add_role', $role->rid );
	}
}
